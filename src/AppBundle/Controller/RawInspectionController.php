<?php // autogenerated on DATE by SurvosCrudBundle:Generated:Custom/Controller/{phpName}Controller.php.twig
# src/Tobacco/FDABundle/Controller/RawInspectionController.php

namespace AppBundle\Controller;

use AppBundle\Entity\RawInspection;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response as HttpResponse;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Tobacco\FDABundle\Form\Type\RawInspectionType;

/**
 * @Route("/inspection")
 */
class RawInspectionController extends Controller
{

    function query($q = '')
    {
        $request = $this->getRequest();
        $query = RawInspectionQuery::create();
        if ($q) {
            $query->filterByRawRetailerName("%$q%")->_or()->filterByRetailerName("%$q%")->_or()->filterByRawFullAddress("%$q%")->_or()->filterByCleanFullAddress("%$q%")->_or()->filterByRawStreetAddress("%$q%")->_or()->filterByStreetAddress("%$q%")->_or()->filterByCity("%$q%")->_or()->filterByState("%$q%")->_or()->filterByZip("%$q%")->_or()->filterByKey("%$q%")->_or()->filterByDecisionType("%$q%")->_or()->filterByGoogleDataJson("%$q%")->_or()->filterByMatch("%$q%")->_or()->filterByReferenceNumber("%$q%")->_or()->filterByWarningUrl("%$q%")->_or()->filterByWarningHtml("%$q%")->_or()->filterByWarningJson("%$q%")->_or()->filterByViolationsList("%$q%");
        }

        if ($request->get('isWarningSent')) {
            $query->filterByIsWarningSent(true);
        }

        if ($x = $request->get('DecisionType')) {
            $query->filterByDecisionType($x);
        }

        if ($x = $request->get('UcmNumber')) {
            $query->filterByUcmNumber($x);
        }

        if ($year = $request->get('Year')) {
            $query->filterByInspectionYear($year);
        }

        if ($statute = $request->get('Statute')) {
            $method = 'filterByHas' . $statute;
            $query->$method(1);
        }

        return $query;
    }

    /**
     * @Route("/", name="fda_rawinspection_index")
     * @Template("TobaccoFDABundle:RawInspection:browse.html.twig")
     */
    public function indexAction(Request $request)
    {
        return array_merge(parent::indexAction($request), [
            'display_route' => "crud_fda_RawInspection_display",
        ]);
    }

    /**
     * @Route("/wiki/{ucmNumber}.{_format}", name="fda_rawinspection_wikitext")
     * @Template()
     */
    function wikiTextAction(Request $request, $ucmNumber, $_format = 'txt')
    {
        if (!$inspection = RawInspectionQuery::create()
            ->filterByUcmNumber($ucmNumber)
            ->findOne()
        ) {
            throw new \Exception("No inspection for $ucmNumber");
        }
        return ['inspection' => $inspection];
    }

    /**
     * @Route("/clean_letter/{ucmNumber}.{_format}", name="fda_Warning_letter")
     * @Template()
     */
    function letterAction(Request $request, $ucmNumber, $_format = 'html')
    {
        $highlight = $request->get('highlight', '');
        $delete_before = $request->get('delete_before', '');
        $delete_after = $request->get('delete_after', '');
        if (!$warning = RawInspectionQuery::create()->findOneByUcmNumber($ucmNumber)) {
            throw new NotFoundHttpException("No warning letter for $ucmNumber");
        }
        $letter = $warning->getCleanHtml();
        if ($warning->isCivil()) {
            if (!$delete_before) {
                $delete_before = '<h3>INTRODUCTION';
            }
        }
        if (empty($letter)) {
            $letter = "No text for this letter";
        }
        if ($delete_before) {
            $letter = preg_replace('{^.*?(' . quotemeta($delete_before) . ')}s', '$1', $letter);
        }
        if ($delete_after) {
            $letter = preg_replace('{^(.*' . quotemeta($delete_after) . ').*$}s', '$1', $letter);
        }
        $letter = preg_replace('{.*?(<article)}s', '$1', $letter);
        $letter = preg_replace('{^(.*</article>).*$}s', '$1', $letter);

        if ($highlight) {
            $letter = preg_replace(
                '{(' . quotemeta($highlight) . ')}s',
                '<span style="background: yellow">$1</span>',
                $letter
            );
        }

        return [
            'warning' => $warning,
            'letter'  => $letter];
    }

    /**
     * @Route("/report14e", name="fda_14e_report")
     * @Template()
     */
    function report14eAction()
    {
        $q = RawInspectionQuery::create()
            ->filterByHas14e(1)
            ->limit(10);
        return ['q' => $q];
    }

    /**
     * @Route("/summary", name="fda_inspection_summary")
     * @Template()
     */
    function summaryAction()
    {
        $warningQuery = RawInspectionQuery::create()
            ->filterByWarningIssued()
            ->withColumn('COUNT(*)', 'warning_count')
            ->select(['RawState', 'warning_count'])
            ->groupBy('RawState')
            // ->groupByClass('Statute')
            // ->orderByCount()
        ;
        $warnings = [];
        foreach ($warningQuery->find() as $w) {
            $warnings[$w['RawState']] = $w['warning_count'];
        }
        // ldd($warningQuery->find());
        $stateQuery = RawInspectionQuery::create()
            ->withColumn('COUNT(*)', 'inspection_count')
            ->select(['RawState', 'inspection_count'])
            ->groupBy('RawState')
            // ->groupByClass('Statute')
            // ->orderByCount()
        ;
        // tt::dump_die($stateQuery->find());

        $query = WarningStatuteQuery::create()
            ->joinWith('Statute')
            ->withColumn('COUNT(*)', 'statute_count')
            ->select(['StatuteId', 'Statute.Code', 'statute_count'])
            ->groupBy('StatuteId')
            ->groupByClass('Statute')// ->orderByCount()
        ;

        return [
            'stateSummaryQuery'   => $stateQuery,
            'warnings'            => $warnings,
            'statuteSummaryQuery' => $query];
        ldd($query->find());
        $counts = [];
        foreach (StatuteQuery::create()->find() as $statute) {
            $method = 'filterByHas' . $statute->getVarCode();
            if (method_exists(RawInspectionQuery::create(), $method)) {
                $counts[$statute->getCode()] = RawInspectionQuery::create()
                    ->filterByViolationCount(0, \CRITERIA::GREATER_THAN)
                    ->$method(1)
                    ->count();
            }

        }
        ldd($counts);
        return ['q' => $q];
    }

    /**
     * @Route("/edit/{id}", requirements={"id"="\d+", }, name="crud_fda_RawInspection_edit")
     * @Template("CrudTobaccoFDABundle:RawInspection:edit.html.twig")
     */
    function editAction(Request $request, RawInspection $rawInspection)
    {
        $form = $this->createForm(new RawInspectionType(), $rawInspection);
        if ('POST' === $request->getMethod()) {
            $form->bind($request);
            if ($form->isValid()) {
                $rawInspection->save();
                $key['id'] = $rawInspection->getId();
                return $this->redirect($this->generateUrl('crud_fda_RawInspection_display', $key));
                // array('id' => $rawInspection->getPrimaryKey())));

            }
        }
        return [
            'rawInspection' => $rawInspection,
            'form'          => $form->createView()
        ];
    }

    /**
     * @Route("/new", name="crud_fda_RawInspection_new")
     * @Template("CrudTobaccoFDABundle:RawInspection:edit.html.twig")
     */
    function newAction()
    {
        $request = $this->getRequest();
        $rawInspection = new RawInspection();
        $redirect_route = 'crud_fda_RawInspection_display';
        foreach ($request->query->all() as $var => $val) {
            if ($var == '_redirect_route') {
                $redirect_route = $val;
            } else {
                $rawInspection->setByName($var, $val, \BasePeer::TYPE_STUDLYPHPNAME);
            }
        }
        $form = $this->createForm(new RawInspectionType(), $rawInspection);
        if ('POST' === $request->getMethod()) {
            $form->bind($request);
            if ($form->isValid()) {
                $rawInspection->save();
                $key['id'] = $rawInspection->getId();
                return $this->redirect($this->generateUrl($redirect_route, $key));
            }
        }
        return [
            'form' => $form->createView()
        ];
    }

    /**
     * @Route("/{id}", requirements={"id"="\d+", }, name="crud_fda_RawInspection_display")
     * @Template("TobaccoFDABundle:RawInspection:display.html.twig")
     */
    function displayAction(RawInspection $rawInspection)
    {
        return [
            'rawInspection' => $rawInspection,
            'r'             => $rawInspection,
            'fields'        => [
                'Id'               => 'Id',
                'LineNumber'       => 'LineNumber',
                'RawRetailerName'  => 'RawRetailerName',
                'RetailerName'     => 'RetailerName',
                'RawFullAddress'   => 'RawFullAddress',
                'ViolationHistory' => 'Violation History',
                'RawStreetAddress' => 'RawStreetAddress',
                'StreetAddress'    => 'StreetAddress',
                'City'             => 'City',
                'State'            => 'State',
                'Zip'              => 'Zip',
                'Key'              => 'Key',
                'DecisionType'     => 'DecisionType',
                'DecisionDate'     => 'DecisionDate',
                'InspectionDate'   => 'InspectionDate',
                'GoogleDataJson'   => 'GoogleDataJson',
                'Match'            => 'Match',
                'ReferenceNumber'  => 'ReferenceNumber',
                'Latitude'         => 'Latitude',
                'Longitude'        => 'Longitude',
                'IsWarningSent'    => 'IsWarningSent',
                'UcmNumber'        => 'UcmNumber',
                'WarningUrl'       => 'WarningUrl',
                'WarningHtml'      => 'WarningHtml',
                'WarningDate'      => 'WarningDate',
                'WarningJson'      => 'WarningJson',
                'ViolationCount'   => 'ViolationCount',
                'ViolationsList'   => 'ViolationsList',
                'Has10'            => 'Has10',
                'Has14d'           => 'Has14d',
                'Has16'            => 'Has16',
                'Has16b'           => 'Has16b',
                'Has16d1'          => 'Has16d1',
                'Has2'             => 'Has2',
                'Has16d2'          => 'Has16d2',
                'Has14b'           => 'Has14b',
                'Has16c'           => 'Has16c',
                'Has14a'           => 'Has14a',
                'Has14b1'          => 'Has14b1',
                'Has14b2'          => 'Has14b2',
                'Has14e'           => 'Has14e',
                'Has16c1'          => 'Has16c1',
                'Has14c'           => 'Has14c',
                'Has34b'           => 'Has34b'
            ],
        ];
    }

    /**
     * @Route("/dt.{_format}", name="crud_fda_RawInspection_dt", defaults={"_format"="json"})
     * @Template("SurvosCrudBundle::dt.html.twig")
     */
    function dtAction($_format)
    {
        $query = RawInspectionQuery::create();
        $request = $this->getRequest();
        $filters = $request->get('filters', []);
        // could use $query->filterByArray($filters); ?
        foreach ($filters as $filter => $condition) {
            $query->{'filterBy' . $filter}($condition);
        }
        if ($columns = $request->get('columns', '')) {
            $query->select(explode(',', $columns));
        }
        if ($_format == 'json') {
            return new HttpResponse(json_encode($query->dtResponse()));
        } else {
            return [
                'query' => $query
            ];
        }
    }
}
